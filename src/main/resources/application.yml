spring:
  profiles:
    active: local
  application:
    name: lab-operations

---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
  h2:
    console:
      enabled: true
      path: /h2-console
  flyway:
    enabled: false

---
spring:
  config:
    activate:
      on-profile: postgres
  datasource:
    url: jdbc:postgresql://localhost:5432/lab_operations
    username: lab_user
    password: lab_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
  flyway:
    enabled: false
  h2:
    console:
      enabled: false

---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://localhost:5432/lab_operations
    username: lab_user
    password: lab_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  h2:
    console:
      enabled: false

server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,flyway,circuitbreakers,ratelimiters,retries,bulkheads,timelimiters
  endpoint:
    health:
      show-details: always
      show-components: always
    flyway:
      enabled: true
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
    tags:
      application: ${spring.application.name}

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - org.springframework.dao.DataAccessException
          - java.sql.SQLException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
    instances:
      database:
        baseConfig: default
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
      pdfGeneration:
        baseConfig: default
        waitDurationInOpenState: 60s
        failureRateThreshold: 60
        slowCallDurationThreshold: 5s
      barcodeGeneration:
        baseConfig: default
        waitDurationInOpenState: 20s
        failureRateThreshold: 40
        slowCallDurationThreshold: 1s

  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 500ms
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.dao.DataAccessException
          - java.sql.SQLException
          - java.io.IOException
          - java.net.SocketTimeoutException
    instances:
      database:
        baseConfig: default
        maxAttempts: 3
        waitDuration: 500ms
      externalService:
        baseConfig: default
        maxAttempts: 2
        waitDuration: 1s

  ratelimiter:
    configs:
      default:
        registerHealthIndicator: true
        limitForPeriod: 100
        limitRefreshPeriod: 1m
        timeoutDuration: 5s
    instances:
      api:
        baseConfig: default
        limitForPeriod: 100
        limitRefreshPeriod: 1m
      barcode:
        baseConfig: default
        limitForPeriod: 50
        limitRefreshPeriod: 1m
        timeoutDuration: 3s
      pdf:
        baseConfig: default
        limitForPeriod: 20
        limitRefreshPeriod: 1m
        timeoutDuration: 10s

  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 10
        maxWaitDuration: 5s
    instances:
      database:
        baseConfig: default
        maxConcurrentCalls: 10
      pdf:
        baseConfig: default
        maxConcurrentCalls: 3
        maxWaitDuration: 15s
      barcode:
        baseConfig: default
        maxConcurrentCalls: 5
        maxWaitDuration: 3s

  timelimiter:
    configs:
      default:
        timeoutDuration: 10s
        cancelRunningFuture: true
    instances:
      database:
        baseConfig: default
        timeoutDuration: 10s
      pdf:
        baseConfig: default
        timeoutDuration: 30s
      barcode:
        baseConfig: default
        timeoutDuration: 5s

logging:
  level:
    com.sivalab.laboperations: INFO
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# WLAN and Network Management Configuration (Optional - Plug and Play)
lab:
  network:
    enabled: ${NETWORK_MONITORING_ENABLED:true}  # Optional feature - enabled for testing
    monitoring:
      interval: ${WLAN_MONITORING_INTERVAL:60}    # seconds
      auto-detection: ${NETWORK_AUTO_DETECTION:true}
      retry-attempts: ${NETWORK_RETRY_ATTEMPTS:3}
      timeout: ${NETWORK_TIMEOUT:30}              # seconds
    machine-id:
      validation: ${MACHINE_ID_VALIDATION:false}  # Optional validation - disabled by default
      auto-register: ${MACHINE_ID_AUTO_REGISTER:false}  # Optional auto-registration
      duplicate-check: ${MACHINE_ID_DUPLICATE_CHECK:false}  # Optional duplicate checking
    features:
      connectivity-test: ${NETWORK_CONNECTIVITY_TEST:false}  # Optional connectivity testing
      issue-auto-detection: ${NETWORK_ISSUE_AUTO_DETECTION:false}  # Optional auto issue detection
      statistics-collection: ${NETWORK_STATISTICS:true}     # Statistics always available
    fallback:
      graceful-degradation: true  # System continues without network features
      skip-network-errors: true   # Don't fail startup on network issues
